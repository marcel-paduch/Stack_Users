// Mocks generated by Mockito 5.3.2 from annotations
// in stack_users/test/fetch_users_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:stack_users/user/data/user_repository.dart' as _i4;
import 'package:stack_users/user/models/user.dart' as _i6;
import 'package:stack_users/user/models/user_list.dart' as _i2;
import 'package:stack_users/user/models/user_reputation_list.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserList_0 extends _i1.SmartFake implements _i2.UserList {
  _FakeUserList_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserReputationList_1 extends _i1.SmartFake
    implements _i3.UserReputationList {
  _FakeUserReputationList_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i4.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.UserList> getUsersWithFavourites([
    int? page = 1,
    int? pageSize = 30,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUsersWithFavourites,
          [
            page,
            pageSize,
          ],
        ),
        returnValue: _i5.Future<_i2.UserList>.value(_FakeUserList_0(
          this,
          Invocation.method(
            #getUsersWithFavourites,
            [
              page,
              pageSize,
            ],
          ),
        )),
      ) as _i5.Future<_i2.UserList>);
  @override
  _i5.Future<_i3.UserReputationList> getUserReputation(
    int? userId, [
    int? page = 1,
    int? pageSize = 30,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserReputation,
          [
            userId,
            page,
            pageSize,
          ],
        ),
        returnValue:
            _i5.Future<_i3.UserReputationList>.value(_FakeUserReputationList_1(
          this,
          Invocation.method(
            #getUserReputation,
            [
              userId,
              page,
              pageSize,
            ],
          ),
        )),
      ) as _i5.Future<_i3.UserReputationList>);
  @override
  void setUserStatus(
    int? userId,
    bool? isLiked,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setUserStatus,
          [
            userId,
            isLiked,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i6.User> getUsersFromCache() => (super.noSuchMethod(
        Invocation.method(
          #getUsersFromCache,
          [],
        ),
        returnValue: <_i6.User>[],
      ) as List<_i6.User>);
}

/// A class which mocks [UserList].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserList extends _i1.Mock implements _i2.UserList {
  MockUserList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i6.User> get users => (super.noSuchMethod(
        Invocation.getter(#users),
        returnValue: <_i6.User>[],
      ) as List<_i6.User>);
  @override
  bool get hasMore => (super.noSuchMethod(
        Invocation.getter(#hasMore),
        returnValue: false,
      ) as bool);
  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
  @override
  _i2.UserList copyWith({required List<_i6.User>? users}) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {#users: users},
        ),
        returnValue: _FakeUserList_0(
          this,
          Invocation.method(
            #copyWith,
            [],
            {#users: users},
          ),
        ),
      ) as _i2.UserList);
}
